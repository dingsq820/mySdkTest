{"version":3,"file":"ApprovalService.js","sourceRoot":"","sources":["../../src/approval/ApprovalService.ts"],"names":[],"mappings":"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","sourcesContent":["import { EthereumRpcError, ethErrors } from 'eth-rpc-errors';\nimport { EventEmitter } from 'events';\nimport { v1 as uuid } from 'uuid';\n\nimport {\n  PersonalMessage,\n  PersonalMessageParams,\n  TypedMessage,\n  TypedMessageParams,\n} from '../account/MessageType';\nimport { AbstractAdapter, IConfig, IState } from '../core/AbstractAdapter';\nimport { AbstractService } from '../core/AbstractService';\nimport { normalizeMessageData, validateSignMessageData } from './ApprovalUtil';\n\nconst serviceName = 'ApprovalService';\ntype Json = null | boolean | number | string | Json[] | { [prop: string]: Json };\ntype ApprovalPromiseResolve = (value?: unknown) => void;\ntype ApprovalPromiseReject = (error?: unknown) => void;\n\ntype ApprovalRequestData = Record<string, Json> | null;\n\ntype ApprovalCallbacks = {\n  resolve: ApprovalPromiseResolve;\n  reject: ApprovalPromiseReject;\n};\n\nexport type ApprovalRequest<RequestData extends ApprovalRequestData> = {\n  id: string;\n  origin: string;\n  time: number;\n  type: string;\n  requestData: RequestData;\n};\n\ntype ShowApprovalRequest = () => void | Promise<void>;\n\ntype AddApprovalOptions = {\n  id?: string;\n  origin: string;\n  type: string;\n  requestData?: Record<string, Json>;\n};\n\nconst getAlreadyPendingMessage = (origin: string, type: string) =>\n  `Request of type '${type}' already pending for origin ${origin}. Please wait.`;\n\nexport interface ApprovalState extends IState {\n  pendingApprovals: Record<string, ApprovalRequest<Record<string, Json>>>;\n  pendingApprovalCount: number;\n  unapprovedMessages: { [key: string]: PersonalMessage };\n  unapprovedMessagesCount: number;\n  unapprovedTypeMessages: { [key: string]: TypedMessage };\n  unapprovedTypeMessagesCount: number;\n}\n\nexport interface ApprovalConfig extends IConfig {\n  showApprovalRequest: ShowApprovalRequest;\n}\n\nconst getDefaultState = (): ApprovalState => ({\n  pendingApprovals: {},\n  pendingApprovalCount: 0,\n  unapprovedMessages: {},\n  unapprovedMessagesCount: 0,\n  unapprovedTypeMessages: {},\n  unapprovedTypeMessagesCount: 0,\n});\n\nexport interface OriginalRequest {\n  origin?: string;\n}\n\nexport class ApprovalService<\n  A extends AbstractAdapter<ApprovalState, ApprovalConfig>\n> extends AbstractService<A, ApprovalState, ApprovalConfig> {\n  override name = serviceName;\n\n  private _approvals: Map<string, ApprovalCallbacks> = new Map();\n\n  private _origins: Map<string, Set<string>> = new Map();\n\n  /**\n   * message event instance\n   */\n  hub = new EventEmitter();\n\n  protected messages: PersonalMessage[] = [];\n\n  protected typeMessages: TypedMessage[] = [];\n\n  initialize(config?: Partial<ApprovalConfig>, state?: Partial<ApprovalState> | undefined): void {\n    this.updateState({\n      ...getDefaultState(),\n      ...state,\n    });\n  }\n\n  private _isEmptyOrigin(origin: string): boolean {\n    return !this._origins.get(origin)?.size;\n  }\n\n  private _validateAddParams(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>\n  ): void {\n    let errorMessage = null;\n    if (!id || typeof id !== 'string') {\n      errorMessage = 'Must specify non-empty string id.';\n    } else if (this._approvals.has(id)) {\n      errorMessage = `Approval request with id '${id}' already exists.`;\n    } else if (!origin || typeof origin !== 'string') {\n      errorMessage = 'Must specify non-empty string origin.';\n    } else if (!type || typeof type !== 'string') {\n      errorMessage = 'Must specify non-empty string type.';\n    } else if (requestData && (typeof requestData !== 'object' || Array.isArray(requestData))) {\n      errorMessage = 'Request data must be a plain object if specified.';\n    }\n\n    if (errorMessage) {\n      throw ethErrors.rpc.internal(errorMessage);\n    }\n  }\n\n  private _addPendingApprovalOrigin(origin: string, type: string): void {\n    const originSet = this._origins.get(origin) || new Set();\n    originSet.add(type);\n\n    if (!this._origins.has(origin)) {\n      this._origins.set(origin, originSet);\n    }\n  }\n\n  private _addToStore(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>\n  ): void {\n    const approval: ApprovalRequest<Record<string, Json> | null> = {\n      id,\n      origin,\n      type,\n      time: Date.now(),\n      requestData: requestData || null,\n    };\n\n    const { pendingApprovals } = this.getState();\n    const addData: Record<string, ApprovalRequest<Record<string, Json>>> = {};\n    addData[id] = approval as ApprovalRequest<Record<string, Json>>;\n    this.updateState({\n      pendingApprovals: { ...pendingApprovals, ...addData },\n      pendingApprovalCount: Object.keys(pendingApprovals).length + 1,\n    });\n  }\n\n  private _add(\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n    id: string = uuid()\n  ): Promise<unknown> {\n    this._validateAddParams(id, origin, type, requestData);\n\n    if (this._origins.get(origin)?.has(type)) {\n      throw ethErrors.rpc.resourceUnavailable(getAlreadyPendingMessage(origin, type));\n    }\n\n    // add pending approval\n    return new Promise((resolve, reject) => {\n      this._approvals.set(id, { resolve, reject });\n      this._addPendingApprovalOrigin(origin, type);\n      this._addToStore(id, origin, type, requestData);\n    });\n  }\n\n  private _delete(id: string): void {\n    this._approvals.delete(id);\n\n    const { origin, type } = this.getState().pendingApprovals[id]!;\n\n    (this._origins.get(origin) as Set<string>).delete(type);\n    if (this._isEmptyOrigin(origin)) {\n      this._origins.delete(origin);\n    }\n    const { pendingApprovals } = this.getState();\n    if (!pendingApprovals[id]) {\n      return;\n    }\n    const _pendingApprovals: any = { ...pendingApprovals };\n    delete _pendingApprovals[id];\n    this.updateState({\n      pendingApprovals: { ..._pendingApprovals },\n      pendingApprovalCount: Object.keys(_pendingApprovals).length,\n    });\n  }\n\n  private _deleteApprovalAndGetCallbacks(id: string): ApprovalCallbacks {\n    const callbacks = this._approvals.get(id);\n    if (!callbacks) {\n      throw new Error(`Approval request with id '${id}' not found.`);\n    }\n\n    this._delete(id);\n    return callbacks;\n  }\n\n  add(opts: AddApprovalOptions): Promise<unknown> {\n    return this._add(opts.origin, opts.type, opts.requestData, opts.id);\n  }\n\n  get(id: string): ApprovalRequest<ApprovalRequestData> | undefined {\n    return this.getState().pendingApprovals[id];\n  }\n\n  accept(id: string, value?: unknown): void {\n    this._deleteApprovalAndGetCallbacks(id).resolve(value);\n  }\n\n  reject(id: string, error: unknown): void {\n    this._deleteApprovalAndGetCallbacks(id).reject(error);\n  }\n\n  clear(rejectionError: EthereumRpcError<unknown>): void {\n    for (const id of this._approvals.keys()) {\n      this.reject(id, rejectionError);\n    }\n    this._origins.clear();\n    this.updateState(getDefaultState());\n  }\n\n  /**\n   * the number of 'unapproved' Messages in this.messages.\n   */\n  getUnapprovedMessagesCount() {\n    return Object.keys(this.getUnapprovedMessages()).length;\n  }\n\n  getUnapprovedTypeMessagesCount() {\n    return Object.keys(this.getUnapprovedTypeMessages()).length;\n  }\n\n  /**\n   * the 'unapproved' Messages in state messages.\n   */\n  getUnapprovedMessages() {\n    return this.messages\n      .filter((message) => message.status === 'unapproved')\n      .reduce((result: { [key: string]: PersonalMessage }, message: PersonalMessage) => {\n        result[message.id] = message;\n        return result;\n      }, {}) as { [key: string]: PersonalMessage };\n  }\n\n  /**\n   * the 'unapproved' Messages in state messages.\n   */\n  getUnapprovedTypeMessages() {\n    return this.messages\n      .filter((message) => message.status === 'unapproved')\n      .reduce((result: { [key: string]: TypedMessage }, message: TypedMessage) => {\n        result[message.id] = message;\n        return result;\n      }, {}) as { [key: string]: TypedMessage };\n  }\n\n  addMessage(message: PersonalMessage) {\n    this.messages.push(message);\n    this.saveMessageList();\n  }\n\n  addTypeMessage(message: TypedMessage) {\n    this.typeMessages.push(message);\n    this.saveTypeMessageList();\n  }\n\n  /**\n   * Saves the unapproved messages and count to state.\n   *\n   */\n  saveMessageList() {\n    const unapprovedMessages = this.getUnapprovedMessages();\n    const unapprovedMessagesCount = this.getUnapprovedMessagesCount();\n    this.updateState({ unapprovedMessages, unapprovedMessagesCount });\n    this.hub.emit('updateBadge');\n  }\n\n  saveTypeMessageList() {\n    const unapprovedTypeMessages = this.getUnapprovedTypeMessages();\n    const unapprovedTypeMessagesCount = this.getUnapprovedTypeMessagesCount();\n    this.updateState({ unapprovedTypeMessages, unapprovedTypeMessagesCount });\n    this.hub.emit('updateBadge');\n  }\n\n  getMessage(messageId: string) {\n    return this.messages.find((message) => message.id === messageId);\n  }\n\n  getTypeMessage(messageId: string) {\n    return this.typeMessages.find((message) => message.id === messageId);\n  }\n\n  updateMessage(message: PersonalMessage) {\n    const index = this.messages.findIndex((msg) => message.id === msg.id);\n    /* istanbul ignore next */\n    if (index !== -1) {\n      this.messages[index] = message;\n    }\n    this.saveMessageList();\n  }\n\n  updateTypeMessage(message: TypedMessage) {\n    const index = this.typeMessages.findIndex((msg) => message.id === msg.id);\n    /* istanbul ignore next */\n    if (index !== -1) {\n      this.typeMessages[index] = message;\n    }\n    this.saveTypeMessageList();\n  }\n\n  setMessageStatus(messageId: string, status: string) {\n    const message = this.getMessage(messageId);\n    if (!message) {\n      throw new Error(`${this.name}: Message not found for id: ${messageId}.`);\n    }\n    const _message = { ...message };\n    _message.status = status;\n    this.updateMessage(_message);\n    this.hub.emit(`${messageId}:${status}`, _message);\n    if (status === 'rejected' || status === 'signed' || status === 'errored') {\n      this.hub.emit(`${messageId}:finished`, _message);\n    }\n  }\n\n  setTypeMessageStatus(messageId: string, status: string) {\n    const message = this.getTypeMessage(messageId);\n    if (!message) {\n      throw new Error(`${this.name}: Message not found for id: ${messageId}.`);\n    }\n    const _message = { ...message };\n    _message.status = status;\n    this.updateTypeMessage(_message);\n    this.hub.emit(`${messageId}:${status}`, _message);\n    if (status === 'rejected' || status === 'signed' || status === 'errored') {\n      this.hub.emit(`${messageId}:finished`, _message);\n    }\n  }\n\n  addUnapprovedMessageAsync(\n    messageParams: PersonalMessageParams,\n    req?: OriginalRequest\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      validateSignMessageData(messageParams);\n      const messageId = this.addUnapprovedMessage(messageParams, req);\n      this.hub.once(`${messageId}:finished`, (data: PersonalMessage) => {\n        switch (data.status) {\n          case 'signed':\n            return resolve(data.rawSig as string);\n          case 'rejected':\n            return reject(new Error('Personal Message Signature: User denied message signature.'));\n          default:\n            return reject(\n              new Error(\n                `Personal Message Signature: Unknown problem: ${JSON.stringify(messageParams)}`\n              )\n            );\n        }\n      });\n    });\n  }\n\n  addUnapprovedMessage(messageParams: PersonalMessageParams, req?: OriginalRequest) {\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    messageParams.data = normalizeMessageData(messageParams.data);\n    const messageId = uuid();\n    const messageData: PersonalMessage = {\n      id: messageId,\n      messageParams,\n      status: 'unapproved',\n      time: Date.now(),\n      type: 'personal_sign',\n      rawSig: '',\n    };\n    this.addMessage(messageData);\n    this.hub.emit(`unapprovedMessage`, {\n      ...messageParams,\n      ...{ messageId },\n    });\n    return messageId;\n  }\n\n  addUnapprovedTypeMessageAsync(\n    messageParams: TypedMessageParams,\n    req?: OriginalRequest\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const messageId = this.addUnapprovedTypeMessage(messageParams, req);\n      this.hub.once(`${messageId}:finished`, (data: TypedMessage) => {\n        switch (data.status) {\n          case 'signed':\n            return resolve(data.rawSig as string);\n          case 'rejected':\n            return reject(new Error('Personal Message Signature: User denied message signature.'));\n          default:\n            return reject(\n              new Error(\n                `Personal Message Signature: Unknown problem: ${JSON.stringify(messageParams)}`\n              )\n            );\n        }\n      });\n    });\n  }\n\n  addUnapprovedTypeMessage(messageParams: TypedMessageParams, req?: OriginalRequest) {\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    const messageId = uuid();\n    const messageData: TypedMessage = {\n      id: messageId,\n      messageParams,\n      status: 'unapproved',\n      time: Date.now(),\n      type: 'eth_signTypedData_v3',\n      rawSig: '',\n    };\n    this.addTypeMessage(messageData);\n    this.hub.emit(`unapprovedMessage`, {\n      ...messageParams,\n      ...{ messageId },\n    });\n    return messageId;\n  }\n\n  setMessageStatusSigned(messageId: string, rawSig: string) {\n    const message = this.getMessage(messageId);\n    /* istanbul ignore if */\n    if (!message) {\n      return;\n    }\n    message.rawSig = rawSig;\n    this.updateMessage(message);\n    this.setMessageStatus(messageId, 'signed');\n  }\n\n  prepMessageForSigning(messageParams: PersonalMessageParams): Promise<PersonalMessageParams> {\n    delete messageParams.messageId;\n    return Promise.resolve(messageParams);\n  }\n\n  setMessageStatusApproved(messageId: string) {\n    this.setMessageStatus(messageId, 'approved');\n  }\n\n  approveMessage(messageParams: PersonalMessageParams): Promise<PersonalMessageParams> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.setMessageStatusApproved(messageParams.messageId);\n    return this.prepMessageForSigning(messageParams);\n  }\n\n  rejectMessage(messageId: string) {\n    this.setMessageStatus(messageId, 'rejected');\n  }\n\n  setTypeMessageStatusSigned(messageId: string, rawSig: string) {\n    const message = this.getTypeMessage(messageId);\n    /* istanbul ignore if */\n    if (!message) {\n      return;\n    }\n    message.rawSig = rawSig;\n    this.updateTypeMessage(message);\n    this.setTypeMessageStatus(messageId, 'signed');\n  }\n\n  prepTypeMessageForSigning(messageParams: TypedMessageParams): Promise<TypedMessageParams> {\n    delete messageParams.messageId;\n    return Promise.resolve(messageParams);\n  }\n\n  setTypeMessageStatusApproved(messageId: string) {\n    this.setTypeMessageStatus(messageId, 'approved');\n  }\n\n  approveTypeMessage(messageParams: TypedMessageParams): Promise<TypedMessageParams> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.setTypeMessageStatusApproved(messageParams.messageId);\n    return this.prepTypeMessageForSigning(messageParams);\n  }\n\n  rejectTypeMessage(messageId: string) {\n    this.setTypeMessageStatus(messageId, 'rejected');\n  }\n}\n\nexport default ApprovalService;\n"]}