{"version":3,"file":"ApprovalUtil.js","sourceRoot":"","sources":["../../src/approval/ApprovalUtil.ts"],"names":[],"mappings":";;;AAAA,qDAMyB;AAIzB,MAAM,KAAK,GAAG,kBAAkB,CAAC;AAEjC;;;;;;;GAOG;AACH,SAAgB,iBAAiB,CAAC,OAAe,EAAE,EAAE,gBAAgB,GAAG,IAAI,EAAE,GAAG,EAAE;IACjF,MAAM,cAAc,GAAG,gBAAgB,CAAC,CAAC,CAAC,IAAA,8BAAY,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IAC1E,IAAI,CAAC,IAAA,6BAAW,EAAC,cAAc,CAAC,EAAE;QAChC,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAA,gCAAc,EAAC,cAAc,CAAC,CAAC;AACxC,CAAC;AAPD,8CAOC;AAED;;GAEG;AACH,SAAgB,uBAAuB,CAAC,WAAkC;IACxE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,WAAW,CAAC;IACnC,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE;QACjE,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAI,0BAA0B,CAAC,CAAC;KAC5E;IAED,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QACrC,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAI,0BAA0B,CAAC,CAAC;KAC5E;AACH,CAAC;AATD,0DASC;AAED;;;;;;GAMG;AACH,SAAgB,oBAAoB,CAAC,IAAY;IAC/C,IAAI;QACF,MAAM,QAAQ,GAAG,IAAA,gCAAc,EAAC,IAAI,CAAC,CAAC;QACtC,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACzB,OAAO,IAAA,8BAAY,EAAC,QAAQ,CAAC,CAAC;SAC/B;KACF;IAAC,OAAO,CAAC,EAAE;QACV,uBAAuB;KACxB;IACD,OAAO,IAAA,6BAAW,EAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AAChD,CAAC;AAVD,oDAUC;AAED;;;;;GAKG;AACH,SAAgB,SAAS,CAAC,GAAW;IACnC,IAAI;QACF,MAAM,QAAQ,GAAG,IAAA,gCAAc,EAAC,GAAG,CAAC,CAAC;QACrC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC9B;IAAC,OAAO,CAAC,EAAE;QACV,iBAAiB;QACjB,OAAO,GAAG,CAAC;KACZ;AACH,CAAC;AATD,8BASC","sourcesContent":["import {\n  addHexPrefix,\n  bufferToHex,\n  isHexString,\n  isValidAddress,\n  stripHexPrefix,\n} from 'ethereumjs-util';\n\nimport { PersonalMessageParams } from '../account/MessageType';\n\nconst hexRe = /^[0-9A-Fa-f]+$/gu;\n\n/**\n * Validates that the input is a hex address.\n *\n * @param address - Input address.\n * @param options - The validation options.\n * @param options.allowNonPrefixed - If true will first ensure '0x' is prepended to the string.\n * @returns Whether or not the input is a valid hex address.\n */\nexport function isValidHexAddress(address: string, { allowNonPrefixed = true } = {}) {\n  const addressToCheck = allowNonPrefixed ? addHexPrefix(address) : address;\n  if (!isHexString(addressToCheck)) {\n    return false;\n  }\n\n  return isValidAddress(addressToCheck);\n}\n\n/**\n * Validates a PersonalMessageParams.\n */\nexport function validateSignMessageData(messageData: PersonalMessageParams) {\n  const { from, data } = messageData;\n  if (!from || typeof from !== 'string' || !isValidHexAddress(from)) {\n    throw new Error(`Invalid \"from\" address: ${from} must be a valid string.`);\n  }\n\n  if (!data || typeof data !== 'string') {\n    throw new Error(`Invalid message \"data\": ${data} must be a valid string.`);\n  }\n}\n\n/**\n * Converts rawmessageData buffer data to a hex,\n * or just returns the data if it is already formatted as a hex.\n *\n * @param data - The buffer data to convert to a hex.\n * @returns A hex string conversion of the buffer data.\n */\nexport function normalizeMessageData(data: string) {\n  try {\n    const stripped = stripHexPrefix(data);\n    if (stripped.match(hexRe)) {\n      return addHexPrefix(stripped);\n    }\n  } catch (e) {\n    /* error ignore next */\n  }\n  return bufferToHex(Buffer.from(data, 'utf8'));\n}\n\n/**\n * Converts hex data to human readable string.\n *\n * @param hex - The hex string to convert to string.\n * @returns A human readable string conversion.\n */\nexport function hexToText(hex: string) {\n  try {\n    const stripped = stripHexPrefix(hex);\n    const buff = Buffer.from(stripped, 'hex');\n    return buff.toString('utf8');\n  } catch (e) {\n    /* ignore next */\n    return hex;\n  }\n}\n"]}