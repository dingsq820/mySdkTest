{"version":3,"file":"ProviderBridge.js","sourceRoot":"","sources":["../../src/web3/ProviderBridge.ts"],"names":[],"mappings":"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","sourcesContent":["import providerAsMiddleware from 'eth-json-rpc-middleware/providerAsMiddleware';\nimport { EventEmitter } from 'events';\nimport { JsonRpcEngine } from 'json-rpc-engine';\nimport { createEngineStream } from 'json-rpc-middleware-stream';\nimport pump from 'pump';\nimport { createSwappableProxy } from 'swappable-obj-proxy';\nimport URL from 'url-parse';\n\nimport { NetworksChainId } from '../network/NetworkService';\nimport { WalletConnectPort, WebviewPort } from './BridgePort';\nimport { ConnectionStream, setupMultiplex } from './ConnectionStream';\nimport {\n  NOTIFICATION_NAMES,\n  createLoggerMiddleware,\n  createOriginMiddleware,\n} from './MiddlewareUtil';\n\n/**\n * constructor parameters of ProviderBridge\n */\nexport interface ProviderBridgeParameters {\n  webview: any;\n  url: any;\n  rpcMiddleware: any;\n  isMainFrame: boolean;\n  isWalletConnect: boolean;\n  requestActions: any;\n  getApprovedHosts: any;\n  serviceManager: any;\n}\n\nexport class ProviderBridge extends EventEmitter {\n  private _webviewRef: any;\n\n  private url: string;\n\n  private hostname: string;\n\n  private rpcMiddleware: any;\n\n  private isMainFrame: boolean;\n\n  private isWalletConnect: boolean;\n\n  private getApprovedHosts: any;\n\n  private disconnected: boolean;\n\n  private port: any;\n\n  private engine: any;\n\n  private chainIdSent: any;\n\n  private networkVersionSent: any;\n\n  private addressSent: string;\n\n  private _providerProxy: any;\n\n  private provider: any;\n\n  private serviceManager: any;\n\n  constructor({\n    webview,\n    url,\n    rpcMiddleware,\n    isMainFrame,\n    isWalletConnect,\n    requestActions,\n    getApprovedHosts,\n    serviceManager,\n  }: ProviderBridgeParameters) {\n    super();\n    this.url = url;\n    this.hostname = new URL(url).hostname;\n    this.isMainFrame = isMainFrame;\n    this.isWalletConnect = isWalletConnect;\n    this._webviewRef = webview && webview.current;\n    this.disconnected = false;\n    this.getApprovedHosts = getApprovedHosts;\n\n    this.rpcMiddleware = rpcMiddleware;\n\n    this.serviceManager = serviceManager;\n\n    const provider = this.serviceManager?.getServiceByName('NetworkService').provider;\n\n    // provider and block tracker proxies - because the network changes\n    this._providerProxy = null;\n\n    this.setProvider({ provider });\n\n    this.port = this.isWalletConnect\n      ? new WalletConnectPort(requestActions, this.serviceManager)\n      : new WebviewPort(this._webviewRef, isMainFrame);\n\n    this.engine = null;\n\n    this.chainIdSent = this.serviceManager?.getServiceByName('NetworkService').provider?.chainId;\n    this.networkVersionSent = this.serviceManager?.getServiceByName('NetworkService').NetworkType;\n\n    // for WalletConnect\n    this.addressSent = this.serviceManager\n      ?.getServiceByName('PreferencesService')\n      .getSelectedAddress()\n      ?.toLowerCase();\n\n    const portStream = new ConnectionStream(this.port, url);\n    // setup multiplexing\n    const mux = setupMultiplex(portStream);\n    // connect features\n    this.setupProviderConnection(\n      mux.createStream(isWalletConnect ? 'walletconnect-provider' : 'alphaUWallet-provider')\n    );\n\n    this.serviceManager\n      ?.getServiceByName('NetworkService')\n      .adapter.addStateListener(this.sendStateUpdate);\n    this.serviceManager\n      ?.getServiceByName('PreferencesService')\n      .adapter.addStateListener(this.sendStateUpdate);\n    this.serviceManager?.getServiceByName('AccountService').onLock(this.onLock.bind(this));\n    this.serviceManager?.getServiceByName('AccountService').onUnlock(this.onUnlock.bind(this));\n\n    this.on('update', this.onStateUpdate);\n  }\n\n  setProvider({ provider }: any) {\n    // update or intialize proxies\n    if (this._providerProxy) {\n      this._providerProxy.setTarget(provider);\n    } else {\n      this._providerProxy = createSwappableProxy(provider);\n    }\n    // set new provider\n    this.provider = provider;\n  }\n\n  onUnlock() {\n    // TODO UNSUBSCRIBE EVENT INSTEAD\n    if (this.disconnected) return;\n\n    this.sendNotification({\n      method: NOTIFICATION_NAMES.unlockStateChanged,\n      params: true,\n    });\n  }\n\n  onLock() {\n    // TODO UNSUBSCRIBE EVENT INSTEAD\n    if (this.disconnected) return;\n\n    this.sendNotification({\n      method: NOTIFICATION_NAMES.unlockStateChanged,\n      params: false,\n    });\n  }\n\n  getProviderNetworkState({ network }: any) {\n    const networkType = this.serviceManager?.getServiceByName('NetworkService').provider?.type;\n    const networkProvider = this.serviceManager?.getServiceByName('NetworkService').provider;\n    const isInitialNetwork = networkType;\n    let chainId;\n\n    if (isInitialNetwork) {\n      chainId = NetworksChainId[networkType as keyof typeof NetworksChainId];\n    } else if (networkType === 'rpc') {\n      chainId = networkProvider.chainId;\n    }\n    if (chainId && !chainId.startsWith('0x')) {\n      // Convert to hex\n      chainId = `0x${parseInt(chainId, 10).toString(16)}`;\n    }\n\n    const result = {\n      networkVersion: network,\n      chainId,\n    };\n    return result;\n  }\n\n  onStateUpdate(memState: any) {\n    const provider = this.serviceManager?.getServiceByName('NetworkService').provider;\n    this.setProvider({ provider });\n    if (!memState) {\n      memState = this.getState();\n    }\n    const publicState = this.getProviderNetworkState(memState);\n\n    // Check if update already sent\n    if (\n      this.chainIdSent !== publicState.chainId &&\n      this.networkVersionSent !== publicState.networkVersion &&\n      publicState.networkVersion !== 'loading'\n    ) {\n      this.chainIdSent = publicState.chainId;\n      this.networkVersionSent = publicState.networkVersion;\n      this.sendNotification({\n        method: NOTIFICATION_NAMES.chainChanged,\n        params: publicState,\n      });\n    }\n\n    // ONLY NEEDED FOR WC FOR NOW, THE BROWSER HANDLES THIS NOTIFICATION BY ITSELF\n    if (this.isWalletConnect) {\n      if (this.addressSent !== memState.selectedAddress) {\n        this.addressSent = memState.selectedAddress;\n        this.sendNotification({\n          method: NOTIFICATION_NAMES.accountsChanged,\n          params: [memState.selectedAddress],\n        });\n      }\n    }\n  }\n\n  isUnlocked() {\n    return this.serviceManager?.getServiceByName('AccountService').isUnlocked();\n  }\n\n  getProviderState() {\n    const memState = this.getState();\n    return {\n      isUnlocked: this.isUnlocked(),\n      ...this.getProviderNetworkState(memState),\n    };\n  }\n\n  sendStateUpdate = () => {\n    this.emit('update');\n  };\n\n  onMessage = (msg: any) => {\n    this.port.emit('message', { name: msg.name, data: msg.data });\n  };\n\n  onDisconnect = () => {\n    this.disconnected = true;\n    this.serviceManager\n      ?.getServiceByName('NetworkService')\n      .adapter.removeStateListener(this.sendStateUpdate);\n    this.serviceManager\n      ?.getServiceByName('PreferencesService')\n      .adapter.removeStateListener(this.sendStateUpdate);\n    this.port.emit('disconnect', { name: this.port.name, data: null });\n  };\n\n  /**\n   * A method for serving our ethereum provider over a given stream.\n   * @param {*} outStream - The stream to provide over.\n   */\n  setupProviderConnection(outStream: any) {\n    this.engine = this.setupProviderEngine();\n\n    // setup connection\n    const providerStream = createEngineStream({ engine: this.engine });\n\n    pump(outStream, providerStream, outStream, (err: any) => {\n      // handle any middleware cleanup\n      this.engine._middleware.forEach((mid: any) => {\n        if (mid.destroy && typeof mid.destroy === 'function') {\n          mid.destroy();\n        }\n      });\n      if (err) console.log('Error with provider stream conn', err);\n    });\n  }\n\n  /**\n   * A method for creating a provider that is safely restricted for the requesting domain.\n   **/\n  setupProviderEngine() {\n    const origin = this.hostname;\n    // setup json rpc engine stack\n    const engine = new JsonRpcEngine();\n    const provider = this._providerProxy;\n\n    // metadata\n    engine.push(createOriginMiddleware({ origin }));\n    engine.push(createLoggerMiddleware());\n\n    // user-facing RPC methods\n    engine.push(\n      this.rpcMiddleware({\n        hostname: this.hostname,\n        getProviderState: this.getProviderState.bind(this),\n      })\n    );\n\n    // forward to digitalwallet primary provider\n    engine.push(providerAsMiddleware(provider));\n    return engine;\n  }\n\n  sendNotification(payload: any) {\n    this.engine && this.engine.emit('notification', payload);\n  }\n\n  /**\n   * The state of the sdk\n   *\n   * @returns {Object} status\n   */\n  getState() {\n    const vault = this.serviceManager?.getServiceByName('AccountService')?.vault;\n    const network = this.serviceManager?.getServiceByName('NetworkService').provider?.type;\n    const selectedAddress = this.serviceManager\n      ?.getServiceByName('PreferencesService')\n      .getSelectedAddress()\n      ?.toLowerCase();\n    return {\n      isInitialized: !!vault,\n      isUnlocked: true,\n      network,\n      selectedAddress,\n    };\n  }\n}\n\nexport default ProviderBridge;\n"]}