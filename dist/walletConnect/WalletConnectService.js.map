{"version":3,"file":"WalletConnectService.js","sourceRoot":"","sources":["../../src/walletConnect/WalletConnectService.ts"],"names":[],"mappings":";;;;;;AAAA,mEAAoD;AAUpD,gDAA6D;AAE7D;;GAEG;AACH,MAAa,oBAAoB;IAG/B;;;OAGG;IACH,YAAY,aAAoC;QAC9C,IAAI,CAAC,eAAe,GAAG,IAAI,gBAAe,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,QAA4D;QAC3E,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,QAA4D;QACxE,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,QAA4D;QACvE,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAClD,CAAC;IAED;;;OAGG;IACH,eAAe,CAAC,QAA4D;QAC1E,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,QAA0C;QACvD,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,QAAwC;QACpD,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,aAA6B;QACzC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IACpD,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,aAA6B;QAC1C,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,YAA4B;QACxC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,WAAW;QACT,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,UAAU;QAaR,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,qBAAqB,CAAC,GAAW;QACtC,OAAO,IAAA,6BAAqB,EAAC,GAAG,CAAC,CAAC;IACpC,CAAC;CACF;AA5HD,oDA4HC;AAED,kBAAe,oBAAoB,CAAC","sourcesContent":["import RNWalletConnect from '@walletconnect/client';\nimport type {\n  IClientMeta,\n  IJsonRpcResponseError,\n  IJsonRpcResponseSuccess,\n  IParseURIResult,\n  ISessionError,\n  ISessionStatus,\n  IWalletConnectOptions,\n} from '@walletconnect/legacy-types';\nimport { parseWalletConnectUri } from '@walletconnect/utils';\n\n/**\n * Controller responsible for managing walletConnect\n */\nexport class WalletConnectService {\n  private walletConnector: RNWalletConnect;\n\n  /**\n   * Creates a WalletConnectService instance.\n   * @param connectorOpts - wallet connect options.\n   */\n  constructor(connectorOpts: IWalletConnectOptions) {\n    this.walletConnector = new RNWalletConnect(connectorOpts);\n  }\n\n  /**\n   * Subscribe to session requests\n   * @param callback - Handle Session Request\n   */\n  onSessionRequest(callback: (error: Error | null, payload: any | null) => void) {\n    this.walletConnector.on('session_request', callback);\n  }\n\n  /**\n   * Subscribe to call requests\n   * @param callback - Handle Call Request\n   */\n  onCallRequest(callback: (error: Error | null, payload: any | null) => void) {\n    this.walletConnector.on('call_request', callback);\n  }\n\n  /**\n   * Subscribe to disconnect\n   * @param callback - Handle disconnect\n   */\n  onDisconnect(callback: (error: Error | null, payload: any | null) => void) {\n    this.walletConnector.on('disconnect', callback);\n  }\n\n  /**\n   * Subscribe to update session\n   * @param callback - Handle update session\n   */\n  onSessionUpdate(callback: (error: Error | null, payload: any | null) => void) {\n    this.walletConnector.on('session_update', callback);\n  }\n\n  /**\n   * Subscribe to approve request\n   * @param response - json rpc response success\n   */\n  approveRequest(response: Partial<IJsonRpcResponseSuccess>) {\n    this.walletConnector.approveRequest(response);\n  }\n\n  /**\n   * Subscribe to reject request\n   * @param response - json rpc response error\n   */\n  rejectRequest(response: Partial<IJsonRpcResponseError>) {\n    this.walletConnector.rejectRequest(response);\n  }\n\n  /**\n   * Subscribe to update session\n   * @param sessionStatus - session status\n   */\n  updateSession(sessionStatus: ISessionStatus) {\n    this.walletConnector.updateSession(sessionStatus);\n  }\n\n  /**\n   * Subscribe to approve session\n   * @param sessionStatus - session status\n   */\n  approveSession(sessionStatus: ISessionStatus) {\n    this.walletConnector.approveSession(sessionStatus);\n  }\n\n  /**\n   * Subscribe to reject session\n   * @param sessionError - session error\n   */\n  rejectSession(sessionError?: ISessionError) {\n    this.walletConnector.rejectSession(sessionError);\n  }\n\n  /**\n   * Subscribe to kill session\n   */\n  killSession() {\n    this.walletConnector.killSession();\n  }\n\n  /**\n   * Subscribe to get session\n   */\n  getSession(): {\n    connected: boolean;\n    accounts: string[];\n    chainId: number;\n    bridge: string;\n    key: string;\n    clientId: string;\n    clientMeta: IClientMeta | null;\n    peerId: string;\n    peerMeta: IClientMeta | null;\n    handshakeId: number;\n    handshakeTopic: string;\n  } {\n    return this.walletConnector.session;\n  }\n\n  /**\n   * Subscribe to get connect\n   */\n  getConnected(): boolean {\n    return this.walletConnector.connected;\n  }\n\n  /**\n   * parse wallet connect uri\n   * @param str - wallet connect uri\n   * @returns parse uri result\n   */\n  static parseWalletConnectUri(str: string): IParseURIResult {\n    return parseWalletConnectUri(str);\n  }\n}\n\nexport default WalletConnectService;\n"]}