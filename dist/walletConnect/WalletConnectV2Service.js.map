{"version":3,"file":"WalletConnectV2Service.js","sourceRoot":"","sources":["../../src/walletConnect/WalletConnectV2Service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Core } from '@walletconnect/core';\nimport { ErrorResponse, JsonRpcResponse } from '@walletconnect/jsonrpc-utils';\nimport { PairingTypes, SessionTypes } from '@walletconnect/types';\nimport { IWeb3Wallet, Web3Wallet, Web3WalletTypes } from '@walletconnect/web3wallet';\n\nexport class WalletConnectV2Service {\n  private projectId: string;\n\n  private relayUrl: string;\n\n  private metadata: Web3WalletTypes.Metadata;\n\n  private web3Wallet: IWeb3Wallet | undefined;\n\n  /**\n   * Creates a WalletConnectV2Service instance.\n   * @param connectorOpts - wallet connect options.\n   */\n  constructor(projectId: string, relayUrl: string, metadata: Web3WalletTypes.Metadata) {\n    this.projectId = projectId;\n    this.relayUrl = relayUrl;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Create a web3 wallet client.\n   */\n  async createWeb3WalletClient(): Promise<void> {\n    const core = new Core({\n      projectId: this.projectId,\n      relayUrl: this.relayUrl,\n    });\n    const opts = {\n      core,\n      metadata: this.metadata,\n    };\n    this.web3Wallet = await Web3Wallet.init(opts);\n  }\n\n  /**\n   * Get a web3 wallet client.\n   * @returns\n   */\n  async getWeb3WalletClient(): Promise<IWeb3Wallet | undefined> {\n    return this.web3Wallet;\n  }\n\n  /**\n   * Pari.\n   * @param wcuri a wallet connect uri.\n   * @returns pair result.\n   */\n  async pair(wcuri: string): Promise<PairingTypes.Struct | undefined> {\n    const pairingData = await this.web3Wallet?.core.pairing.pair({ uri: wcuri });\n    return pairingData;\n  }\n\n  /**\n   * Subscribe to session proposal.\n   * @param callback - Handle Call Request\n   */\n  onSessionProposal(\n    callback: (args: Web3WalletTypes.EventArguments['session_proposal']) => void\n  ): void {\n    this.web3Wallet?.on('session_proposal', callback);\n  }\n\n  /**\n   * Subscribe to session request\n   * @param callback - Handle Call Request\n   */\n  onSessionRequest(\n    callback: (args: Web3WalletTypes.EventArguments['session_request']) => void\n  ): void {\n    this.web3Wallet?.on('session_request', callback);\n  }\n\n  /**\n   * Subscribe to session delete\n   * @param callback - Handle Call Request\n   */\n  onSessionDelete(\n    callback: (args: Web3WalletTypes.EventArguments['session_delete']) => void\n  ): void {\n    this.web3Wallet?.on('session_delete', callback);\n  }\n\n  /**\n   * Subscribe to approve session\n   * @param params - approve info.\n   */\n  async approveSession(params: {\n    id: number;\n    namespaces: Record<string, SessionTypes.Namespace>;\n    relayProtocol?: string;\n  }): Promise<SessionTypes.Struct | undefined> {\n    const sessionData = await this.web3Wallet?.approveSession(params);\n    return sessionData;\n  }\n\n  /**\n   * Subscribe to reject session\n   * @param params - reject info.\n   */\n  async rejectSession(params: { id: number; reason: ErrorResponse }): Promise<void> {\n    await this.web3Wallet?.rejectSession(params);\n  }\n\n  async updateSession(params: {\n    topic: string;\n    namespaces: SessionTypes.Namespaces;\n  }): Promise<void> {\n    await this.web3Wallet?.updateSession(params);\n  }\n\n  /**\n   * Subscribe to disconnect session\n   * @param params - disconnect session info.\n   */\n  async disconnectSession(params: { topic: string; reason: ErrorResponse }): Promise<void> {\n    await this.web3Wallet?.disconnectSession(params);\n  }\n\n  async respondSessionRequest(params: { topic: string; response: JsonRpcResponse }): Promise<void> {\n    await this.web3Wallet?.respondSessionRequest(params);\n  }\n\n  /**\n   * Get the active sessions.\n   * @returns\n   */\n  getActiveSessions(): SessionTypes.Struct[] | undefined {\n    const sessions = this.web3Wallet?.getActiveSessions();\n    if (sessions) {\n      return Object.values(sessions);\n    }\n\n    return sessions;\n  }\n\n  /**\n   * Get the session by topic.\n   * @param topic\n   * @returns\n   */\n  getCurrentSessionByTopic(topic: string | undefined): SessionTypes.Struct | undefined {\n    const sessions = this.getActiveSessions();\n    if (sessions && topic) {\n      const currentSession = sessions.find((session) => session.topic === topic);\n      const { expiry } = currentSession ?? { expiry: 0 };\n      if (expiry) {\n        if (new Date(expiry * 1000) < new Date()) {\n          return undefined;\n        }\n      }\n      return currentSession;\n    }\n    return undefined;\n  }\n\n  /**\n   * emit session event.\n   * @param params\n   */\n  async emitSessionEvent(params: {\n    topic: string;\n    event: unknown;\n    chainId: string;\n  }): Promise<void> {\n    await this.web3Wallet?.emitSessionEvent(params);\n  }\n\n  /**\n   * disconnect all sessions.\n   */\n  async disconnectAllSessions(reason: ErrorResponse): Promise<void> {\n    const sessions = this.getActiveSessions();\n    if (sessions && sessions.length > 0) {\n      sessions.forEach(async (session) => {\n        const params = { topic: session.topic, reason };\n        await this.disconnectSession(params);\n      });\n    }\n  }\n}\n\nexport default WalletConnectV2Service;\n"]}