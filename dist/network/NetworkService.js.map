{"version":3,"file":"NetworkService.js","sourceRoot":"","sources":["../../src/network/NetworkService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,6CAAoC;AACpC,0DAAiC;AACjC,qEAA+D;AAG/D,6DAA0D;AAI1D,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,2BAAQ,CAAA;IACR,kCAAe,CAAA;IACf,mCAAgB,CAAA;AAClB,CAAC,EAJW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAI1B;AAcD,MAAa,cAEX,SAAQ,iCAA+C;IAFzD;;QAGW,SAAI,GAAG,gBAAgB,CAAC;QAMzB,UAAK,GAAG,IAAI,mBAAK,EAAE,CAAC;IAsC9B,CAAC;IApCC,UAAU,CAAC,MAA+B;QACxC,IAAI,CAAC,WAAW,CAAC;YACf,OAAO,EAAE,SAAS;SACnB,CAAC,CAAC;QAEH,MAAM,cAAc,GAAG;YACrB,OAAO,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO;YACxB,YAAY,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE;YACxC,QAAQ,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ;YAC1B,MAAM,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS;YACzB,MAAM,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM;SACvB,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAA,cAAsB,EAAC,cAAc,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEO,cAAc;QACpB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,KAAK,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;IACtD,CAAC;IAEK,aAAa;;YACjB,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;gBAC9C,OAAO;aACR;YACD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YAC/C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,EAAE,CAAC,KAAY,EAAE,OAAe,EAAE,EAAE;gBACnF,IAAI,CAAC,WAAW,CAAC;oBACf,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO;iBACrC,CAAC,CAAC;gBACH,WAAW,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AA/CD,wCA+CC;AAED,kBAAe,cAAc,CAAC","sourcesContent":["import { Mutex } from 'async-mutex';\nimport EthQuery from 'eth-query';\nimport createMetamaskProvider from 'web3-provider-engine/zero';\n\nimport { AbstractAdapter, IConfig, IState } from '../core/AbstractAdapter';\nimport { AbstractService } from '../core/AbstractService';\n\nexport type NetworkType = 'polygon' | 'mumbai';\n\nexport enum NetworksChainId { // eslint-disable-line no-shadow\n  rpc = '',\n  polygon = '137',\n  mumbai = '80001',\n}\n\nexport interface NetworkState extends IState {\n  network: string;\n}\n\nexport interface NetworkConfig extends IConfig {\n  type: NetworkType;\n  rpcTarget: string;\n  chainId: string;\n  ticker?: string;\n  nickname?: string;\n}\n\nexport class NetworkService<\n  A extends AbstractAdapter<NetworkState, NetworkConfig>\n> extends AbstractService<A, NetworkState, NetworkConfig> {\n  override name = 'NetworkService';\n\n  provider: any;\n\n  ethQuery: any;\n\n  private mutex = new Mutex();\n\n  initialize(config?: Partial<NetworkConfig>): void {\n    this.updateState({\n      network: 'loading',\n    });\n\n    const ProviderConfig = {\n      chainId: config?.chainId,\n      engineParams: { pollingInterval: 12000 },\n      nickname: config?.nickname,\n      rpcUrl: config?.rpcTarget,\n      ticker: config?.ticker,\n    };\n\n    this.provider = createMetamaskProvider(ProviderConfig);\n    this.provider.on('error', this.onNetworkError.bind(this));\n    this.ethQuery = new EthQuery(this.provider);\n    this.updateNetwork();\n  }\n\n  private onNetworkError(): void {\n    const state = this.getState();\n    state.network === 'loading' && this.updateNetwork();\n  }\n\n  async updateNetwork() {\n    if (!this.ethQuery || !this.ethQuery.sendAsync) {\n      return;\n    }\n    const releaseLock = await this.mutex.acquire();\n    this.ethQuery.sendAsync({ method: 'net_version' }, (error: Error, network: string) => {\n      this.updateState({\n        network: error ? 'loading' : network,\n      });\n      releaseLock();\n    });\n  }\n}\n\nexport default NetworkService;\n"]}