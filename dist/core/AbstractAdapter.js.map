{"version":3,"file":"AbstractAdapter.js","sourceRoot":"","sources":["../../src/core/AbstractAdapter.ts"],"names":[],"mappings":";;;AAyBA,MAAsB,eAAe;IASnC,YAAY,QAAoB,EAAO;QAR/B,eAAU,GAAkB,EAAE,CAAC;QAEvC;;;WAGG;QACc,kBAAa,GAAM,EAAO,CAAC;QAG1C,IAAI,CAAC,aAAa,GAAG,KAAU,CAAC;QAChC,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAoBD;;OAEG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,QAAqB;QACpC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED;;;;;OAKG;IACH,mBAAmB,CAAC,QAAqB;QACvC,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC;QACjE,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC/C,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC;IACpB,CAAC;CACF;AAjED,0CAiEC","sourcesContent":["/**\n * @type IConfig\n *\n * Base Adapter configuration\n * @property disabled - Determines if this adapter is enabled\n */\nexport interface IConfig {\n  disabled?: boolean;\n}\n\n/**\n * @type IState\n *\n * Base state representation\n * @property name - Unique name for this adapter\n */\nexport interface IState {\n  name?: string;\n}\n\n/**\n * State change callbacks\n */\nexport type Listener<T> = (state: T, name: string) => void;\n\nexport abstract class AbstractAdapter<S extends IState, C extends IConfig> {\n  private _listeners: Listener<S>[] = [];\n\n  /**\n   * Default state set on this adapter\n   * @private\n   */\n  private readonly _defaultState: S = {} as S;\n\n  constructor(state: Partial<S> = {} as S) {\n    this._defaultState = state as S;\n    this.initialize();\n  }\n\n  /**\n   * Initialization function\n   *\n   */\n  abstract initialize(): void;\n\n  /**\n   * The configuration provided by adapter to the service\n   */\n  abstract configure(): Partial<C>;\n\n  /**\n   * Updates adapter state.\n   * @param serviceState - The new state.\n   * @param serviceName - serviceName.\n   */\n  abstract onStateUpdate(serviceState: Partial<S>, serviceName: string): void;\n\n  /**\n   *  get default config set on this adapter\n   */\n  get defaultState(): S {\n    return this._defaultState;\n  }\n\n  /**\n   *\n   */\n  get listeners(): Listener<S>[] {\n    return this._listeners;\n  }\n\n  /**\n   * Adds new listener to be notified of state changes.\n   * @param listener - The callback triggered when state changes.\n   */\n  addStateListener(listener: Listener<S>) {\n    this._listeners.push(listener);\n  }\n\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and removed.\n   */\n  removeStateListener(listener: Listener<S>) {\n    const index = this._listeners.findIndex((cb) => listener === cb);\n    index > -1 && this._listeners.splice(index, 1);\n    return index > -1;\n  }\n}\n"]}