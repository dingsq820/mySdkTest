{"version":3,"file":"AbstractService.js","sourceRoot":"","sources":["../../src/core/AbstractService.ts"],"names":[],"mappings":";;;AAGA,MAAsB,eAAe;IAArC;QAKE;;WAEG;QACH,SAAI,GAAG,UAAU,CAAC;QAMlB,iBAAY,GAAM,EAAO,CAAC;QAElB,WAAM,GAAM,IAAI,CAAC,YAAY,CAAC;IAsExC,CAAC;IAlEC,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,IAAI,OAAO,CAAC,KAAkC;QAC5C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,IAAI,OAAO,CAAC,GAAkB;QAC5B,IAAI,CAAC,QAAQ,GAAG,GAAQ,CAAC;QACzB,MAAM,YAAY,GAAG,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,YAAY,CAAC;QACvC,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,YAAY,mCAAQ,IAAI,CAAC,YAAY,GAAM,YAAkB,CAAE,CAAC;SACtE;QACD,IAAI,CAAC,MAAM,mCAAQ,IAAI,CAAC,MAAM,GAAK,IAAI,CAAC,YAAY,CAAE,CAAC;IACzD,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,WAAW,CAAC,QAAoB,EAAE;QAChC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,MAAM,mCAAQ,IAAI,CAAC,MAAM,GAAK,KAAK,CAAE,CAAC;YAC3C,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC3C,IAAI,QAAQ,EAAE;oBACZ,QAAQ,mBAAM,IAAI,CAAC,MAAM,GAAI,IAAI,CAAC,IAAI,CAAC,CAAC;iBACzC;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,KAAa,EAAE,OAAY;;QACjC,MAAM,WAAW,GAAG,MAAA,IAAI,CAAC,QAAQ,0CAAE,WAAW,CAAC;QAC/C,IAAI,WAAW,EAAE;YACf,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACpC,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;oBAC1B,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;aACJ;SACF;IACH,CAAC;CACF;AAtFD,0CAsFC;AACD,kBAAe,eAAe,CAAC","sourcesContent":["import type { AbstractAdapter, IConfig, IState } from './AbstractAdapter';\nimport type { AbstractManager } from './AbstractManager';\n\nexport abstract class AbstractService<\n  A extends AbstractAdapter<S, C>,\n  S extends IState,\n  C extends IConfig\n> {\n  /**\n   * Name of this service used during composition\n   */\n  name = 'IService';\n\n  private _adapter: A | undefined;\n\n  private _manager: AbstractManager | undefined;\n\n  defaultState: S = {} as S;\n\n  private _state: S = this.defaultState;\n\n  abstract initialize(config?: Partial<C>, state?: Partial<S> | undefined): void;\n\n  get manager(): AbstractManager | undefined {\n    return this._manager;\n  }\n\n  set manager(value: AbstractManager | undefined) {\n    this._manager = value;\n  }\n\n  /**\n   *\n   * @param adp\n   */\n  set adapter(adp: A | undefined) {\n    this._adapter = adp as A;\n    const adapterState = adp?.defaultState;\n    if (adapterState) {\n      this.defaultState = { ...this.defaultState, ...(adapterState as S) };\n    }\n    this._state = { ...this._state, ...this.defaultState };\n  }\n\n  get adapter(): A | undefined {\n    return this._adapter;\n  }\n\n  /**\n   * Retrieves current controller state.\n   * @returns The current state.\n   */\n  getState() {\n    return this._state;\n  }\n\n  /**\n   * Updates adapter state.\n   * @param state - The new state.\n   */\n  updateState(state: Partial<S> = {}) {\n    if (this._adapter) {\n      this._state = { ...this._state, ...state };\n      this._adapter.onStateUpdate(this._state, this.name);\n\n      this._adapter.listeners.forEach((listener) => {\n        if (listener) {\n          listener({ ...this._state }, this.name);\n        }\n      });\n    }\n  }\n\n  /**\n   *\n   * @param topic\n   * @param payload\n   */\n  publish(topic: string, payload: any) {\n    const subscribers = this._manager?.subscribers;\n    if (subscribers) {\n      const list = subscribers.get(topic);\n      if (list) {\n        list.forEach((subscriber) => {\n          subscriber(topic, payload);\n        });\n      }\n    }\n  }\n}\nexport default AbstractService;\n"]}