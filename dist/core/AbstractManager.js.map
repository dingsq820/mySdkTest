{"version":3,"file":"AbstractManager.js","sourceRoot":"","sources":["../../src/core/AbstractManager.ts"],"names":[],"mappings":";;;AAcA;;GAEG;AACH,MAAsB,eAAe;IAArC;QACU,eAAU,GAAQ,EAAE,CAAC;QAErB,iBAAY,GAA8B,IAAI,GAAG,EAAE,CAAC;IAgF9D,CAAC;IAzEC;;;;;;OAMG;IACH,IAAI,CACF,OAAU,EACV,OAAU;QAEV,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;QAC1B,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QACxC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;QAC9D,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAA2C,IAAY;QACrE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACH,uBAAuB,CAAsC,IAAY;QACvE,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,OAAO,EAAE;YACX,OAAO,OAAO,CAAC,OAAO,CAAC;SACxB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACH,SAAS,CAAC,KAAa,EAAE,UAAsB;QAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAChD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAED;;;;;OAKG;IACH,WAAW,CAAC,KAAa,EAAE,UAA0C;QACnE,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAChD,IAAI,UAAU,EAAE;YACd,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,KAAK,EAAE,CAAC,CAAC;YACxD,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACpC;aAAM;YACL,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAClC;IACH,CAAC;CACF;AAnFD,0CAmFC","sourcesContent":["import { AbstractAdapter } from './AbstractAdapter';\nimport { AbstractService } from './AbstractService';\n\n/**\n * @type GlobalConfig\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface GlobalConfig {}\n\n/**\n * State change callbacks\n */\nexport type Subscriber = (topic: string, payload: any) => void;\n\n/**\n *\n */\nexport abstract class AbstractManager {\n  private _registers: any = {};\n\n  private _subscribers: Map<string, Subscriber[]> = new Map();\n\n  /**\n   *\n   */\n  abstract globalConfigure(): GlobalConfig;\n\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This service instance.\n   */\n  bind<T extends AbstractService<A, any, any>, A extends AbstractAdapter<any, any>>(\n    service: T,\n    adapter: A\n  ): T {\n    service.adapter = adapter;\n    service.manager = this;\n    this._registers[service.name] = service;\n    service.initialize(adapter.configure(), adapter.defaultState);\n    return service;\n  }\n\n  /**\n   * Get the service object by the service name\n   * @param name Service name.\n   */\n  getServiceByName<T extends AbstractService<any, any, any>>(name: string): T | undefined {\n    return this._registers[name];\n  }\n\n  /**\n   * Get the adapter object by the service name\n   * @param name Service name.\n   */\n  getAdapterByServiceName<A extends AbstractAdapter<any, any>>(name: string): A | null | undefined {\n    const service = this._registers[name];\n    if (service) {\n      return service.adapter;\n    }\n    return null;\n  }\n\n  /**\n   *\n   */\n  get subscribers(): Map<string, Subscriber[]> {\n    return this._subscribers;\n  }\n\n  /**\n   * Adds new subscriber to be notified of data changes.\n   *\n   * @param topic - The callback triggered when data changes.\n   * @param subscriber - The callback triggered when data changes.\n   */\n  subscribe(topic: string, subscriber: Subscriber) {\n    const list = this._subscribers.get(topic) || [];\n    list.push(subscriber);\n    this._subscribers.set(topic, list);\n  }\n\n  /**\n   * Removes existing subscriber from receiving state changes.\n   *\n   * @param topic - The name to subscriber.\n   * @param subscriber - The callback to remove.\n   */\n  unsubscribe(topic: string, subscriber?: Subscriber | undefined | null) {\n    const list = this._subscribers.get(topic) || [];\n    if (subscriber) {\n      const index = list.findIndex((cb) => subscriber === cb);\n      index > -1 && list.splice(index, 1);\n      this._subscribers.set(topic, list);\n    } else {\n      this._subscribers.set(topic, []);\n    }\n  }\n}\n"]}